/*
DESCRIPTION: API route that generates and returns a PDF report for a specific Risk Assessment.
- Fetches Risk Assessment data and associated hazards from the database
- Renders a professional PDF report using @react-pdf/renderer
- Includes risk matrix visualization, hazard details, and control measures
- Shows published stamp for published RAs
- Returns the PDF as a downloadable file with proper headers
- Protected by authentication (requires login)

WHAT EACH PART DOES:
1. getAuth() - Gets the current authenticated user from Clerk
2. createAdminClient - Server-side Supabase client for database operations
3. GET handler - Fetches RA data, generates PDF, returns as response
4. PDF generation - Uses React PDF components to create professional report
5. Risk matrix - Visual representation of likelihood vs severity
6. Error handling - Returns appropriate error responses

PSEUDOCODE:
- Check if user is authenticated
- Get RA ID from URL parameters
- Fetch Risk Assessment data from database
- Fetch associated hazards and risk matrix data
- Generate PDF using React PDF components with risk matrix
- Include published stamp if RA is published
- Return PDF as downloadable response
*/

import { getAuth } from '@clerk/nextjs/server'
import { createAdminClient } from '@/lib/supabaseServer'
import { Document, Page, Text, View, StyleSheet, Image, pdf } from '@react-pdf/renderer'

// Simple styles for the PDF
const styles = StyleSheet.create({
  page: {
    padding: 30,
    fontSize: 12,
    lineHeight: 1.4,
  },
  header: {
    marginBottom: 30,
    paddingBottom: 15,
    borderBottomWidth: 2,
    borderBottomColor: '#3b82f6',
  },
  companyName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1e40af',
    marginBottom: 4,
  },
  reportTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1f2937',
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#1f2937',
    marginBottom: 10,
  },
  infoValue: {
    marginBottom: 5,
    color: '#1f2937',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
  },
  footerText: {
    fontSize: 8,
    color: '#6b7280',
  },
})


// Simple PDF Document Component for testing
function RiskAssessmentPDF({ riskAssessment, hazards, assessorName }) {
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.companyName}>Safety Management System</Text>
          <Text style={styles.reportTitle}>Risk Assessment Report</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Assessment Details</Text>
          <Text style={styles.infoValue}>Title: {riskAssessment.title || 'Not specified'}</Text>
          <Text style={styles.infoValue}>Activity: {riskAssessment.activity || 'Not specified'}</Text>
          <Text style={styles.infoValue}>Location: {riskAssessment.location || 'Not specified'}</Text>
          <Text style={styles.infoValue}>Assessor: {assessorName || 'Not specified'}</Text>
          <Text style={styles.infoValue}>Version: {riskAssessment.version}</Text>
          <Text style={styles.infoValue}>Status: {riskAssessment.status}</Text>
        </View>

        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Identified Hazards</Text>
          {hazards && hazards.length > 0 ? (
            hazards.map((hazard, index) => (
              <View key={index} style={styles.section}>
                <Text style={styles.sectionTitle}>Hazard {index + 1}</Text>
                <Text style={styles.infoValue}>{hazard.hazard || 'No description'}</Text>
                <Text style={styles.infoValue}>Risk Before: {hazard.risk_before || 'N/A'}</Text>
                <Text style={styles.infoValue}>Risk After: {hazard.risk_after || 'N/A'}</Text>
              </View>
            ))
          ) : (
            <Text style={styles.infoValue}>No hazards identified</Text>
          )}
        </View>

        <View style={styles.footer}>
          <Text style={styles.footerText}>
            Generated by Safety Management System
          </Text>
        </View>
      </Page>
    </Document>
  )
}

/**
 * GET handler for Risk Assessment PDF reports
 * Generates and returns a PDF report for the specified Risk Assessment
 */
export async function GET(request, { params }) {
  try {
    // Get authentication information
    const { userId } = await getAuth(request)
    
    if (!userId) {
      return new Response(
        JSON.stringify({ error: 'Authentication required' }),
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

    // Get the RA ID from URL parameters
    const { id: raId } = await params
    
    if (!raId) {
      return new Response(
        JSON.stringify({ error: 'Risk Assessment ID is required' }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

    // Create Supabase client
    const supabase = createAdminClient()

    // Fetch the Risk Assessment data
    const { data: riskAssessment, error: raError } = await supabase
      .from('risk_assessments')
      .select('*')
      .eq('id', raId)
      .single()

    if (raError || !riskAssessment) {
      console.error('Error fetching risk assessment:', raError)
      return new Response(
        JSON.stringify({ error: 'Risk Assessment not found' }),
        { 
          status: 404,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

    // Fetch associated hazards
    const { data: hazards, error: hazardsError } = await supabase
      .from('risk_hazards')
      .select('*')
      .eq('ra_id', raId)
      .order('id')

    if (hazardsError) {
      console.error('Error fetching hazards:', hazardsError)
      return new Response(
        JSON.stringify({ error: 'Failed to fetch hazards' }),
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

    // Get assessor name if assessor_id exists
    let assessorName = 'Unknown'
    if (riskAssessment.assessor_id) {
      try {
        const { data: assessor } = await supabase
          .from('user_profiles')
          .select('full_name')
          .eq('user_id', riskAssessment.assessor_id)
          .single()
        
        if (assessor) {
          assessorName = assessor.full_name
        }
      } catch (error) {
        console.warn('Could not fetch assessor name:', error)
      }
    }

    // Generate PDF
    try {
      console.log('Generating PDF for RA:', {
        raId: riskAssessment.id,
        title: riskAssessment.title,
        hazardsCount: hazards?.length || 0,
        assessorName
      })

      const pdfDoc = pdf(
        <RiskAssessmentPDF 
          riskAssessment={riskAssessment}
          hazards={hazards || []}
          assessorName={assessorName}
        />
      )
      
      const pdfBuffer = await pdfDoc.toBuffer()

      console.log('PDF generated successfully, buffer length:', pdfBuffer?.length)
      console.log('PDF buffer type:', typeof pdfBuffer)
      console.log('PDF buffer:', pdfBuffer)

      // Validate PDF buffer
      if (!pdfBuffer) {
        throw new Error('Generated PDF buffer is undefined')
      }
      
      // Check if it's a Buffer or has length property
      if (pdfBuffer.length !== undefined && pdfBuffer.length === 0) {
        throw new Error('Generated PDF buffer is empty')
      }

      // Return PDF response
      return new Response(pdfBuffer, {
        status: 200,
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="risk-assessment-${riskAssessment.title.replace(/[^a-zA-Z0-9]/g, '-')}-v${riskAssessment.version}.pdf"`,
        },
      })
    } catch (pdfError) {
      console.error('PDF generation error:', pdfError)
      return new Response(
        JSON.stringify({ error: 'Failed to generate PDF' }),
        { 
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      )
    }

  } catch (error) {
    console.error('Risk Assessment PDF route error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}
